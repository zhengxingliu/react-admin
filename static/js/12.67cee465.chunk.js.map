{"version":3,"sources":["views/Dashboard/index.js"],"names":["gridSpan","xs","sm","md","lg","xl","Dashboard","getVisitsGraphData","updater","isMounted","setState","isLoading","getSiteVisitStatistics","then","res","option","color","tooltip","trigger","axisPointer","type","grid","left","right","bottom","containLabel","xAxis","data","amount","map","item","month","axisTick","alignWithLabel","show","axisLine","lineStyle","axisLabel","textStyle","yAxis","series","name","areaStyle","barWidth","visits","dataZoom","siteVisitsChart","setOption","catch","err","console","log","hasError","finally","initSiteVisitsChart","echarts","init","VisitsChartRef","current","resizeChart","setTimeout","resize","updateClock","e","setInterval","this","time","moment","bind","createRef","state","window","addEventListener","title","bordered","bodyStyle","backgroundColor","gutter","className","hoverable","percent","style","lineHeight","padding","value","precision","valueStyle","prefix","suffix","paddingTop","marginTop","format","spinning","icon","ref","height","flex","width","Component"],"mappings":"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","file":"static/js/12.67cee465.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react'\nimport { Card, Row, Col, Progress, Statistic, Divider, Typography, Spin, Result } from 'antd'\nimport { ArrowUpOutlined, ArrowDownOutlined, FrownOutlined  } from '@ant-design/icons'\nimport echarts from 'echarts'\nimport moment from 'moment'\n\nimport { getSiteVisitStatistics }  from '../../requests'\nimport './Dashboard.less'\n\nconst gridSpan = {\n  xs: 24,\n  sm: 12,\n  md: 6,\n  lg: 6,\n  xl: 6\n}\n\nexport default class Dashboard extends Component {\n  constructor() {\n    super()\n    this.VisitsChartRef = createRef()\n    this.state = {\n      isLoading: false,\n      hasError: false,\n      time: moment()\n    }\n  }\n  \n  getVisitsGraphData = () => {\n    if (!this.updater.isMounted(this)) return \n    this.setState({isLoading: true})\n    getSiteVisitStatistics()\n      .then(res => {\n      \n        const months = res.data.amount.map(item => item.month)\n        const visits = res.data.amount.map(item => item.visits)\n        const option = {\n          color: ['#1a90ff'],\n          tooltip: {\n            trigger: 'axis',\n            axisPointer: {           \n                type: 'shadow'        \n            }\n          },\n          grid: {\n            left: '3%',\n            right: '4%',\n            bottom: '3%',\n            containLabel: true\n          },\n          xAxis: [\n            {   \n              type: 'category',\n              data: months,\n              axisTick: {\n                  alignWithLabel: true,\n                  show: false\n              },\n              axisLine: { \n                lineStyle: {\n                  color: '#999'\n                }\n              },\n              axisLabel: {\n                textStyle: {\n                    color: '#999'\n                }\n              }\n            }\n          ],\n          yAxis: [\n            {\n              type: 'value',\n              axisLine: { \n                lineStyle: {\n                  color: '#999'\n                }\n              },\n              axisLabel: {\n                textStyle: {\n                    color: '#999'\n                }\n              },\n              axisTick: {\n                show: false\n              }\n            }\n          ],\n          series: [\n            {\n              name: 'visits',\n              type: 'line',\n              areaStyle: {},\n              barWidth: '60%',\n              data: visits\n            }\n          ],\n          dataZoom: [\n            {\n              type: 'inside',\n            }\n        ],\n      }\n      this.siteVisitsChart.setOption(option)\n      })\n      .catch(err => {\n        console.log(err)\n        if (!this.updater.isMounted(this)) return \n        this.setState({hasError: true})\n      })\n      .finally(() => {\n        if (!this.updater.isMounted(this)) return \n        this.setState({isLoading: false})\n      })\n  }\n  \n  initSiteVisitsChart = () => {  \n    this.siteVisitsChart = echarts.init(this.VisitsChartRef.current)\n  }\n\n  resizeChart = () => {\n    setTimeout(() => {\n      this.siteVisitsChart.resize()\n    }, 800);\n  }\n  \n  updateClock = (e) => {\n    setInterval(function(){ this.setState({time: moment()}) }.bind(this), 1000)\n  }\n  \n  componentDidMount() {\n    this.initSiteVisitsChart()\n    this.getVisitsGraphData()\n    this.updateClock()\n    window.addEventListener('resize', this.resizeChart);\n    window.addEventListener('fullscreenchange', this.resizeChart.bind(this))\n  }\n\n\n  render() {\n    return (\n      <>\n        <Card\n          title='Overview'\n          bordered={false}\n          bodyStyle={{backgroundColor: '#eff2f5'}}\n        >\n          \n          <Row type=\"flex\" gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n            <Col className=\"gutter-row\" {...gridSpan}>\n              <Card hoverable className='gutter-box' >\n                <Progress type=\"dashboard\"  percent={75} />   \n                <Typography style={{lineHeight: '30px'}}>Operation Rate</Typography> \n              </Card>\n            </Col>\n\n\n            <Col className=\"gutter-row\" {...gridSpan}>\n              <Card hoverable className='gutter-box' bodyStyle={{padding: '13px'}}>\n                    <Statistic \n                      title=\"Active\"\n                      value={11.28}\n                      precision={2}\n                      valueStyle={{ color: '#3f8600'}}\n                      prefix={<ArrowUpOutlined />}\n                      suffix=\"%\"\n                    />\n                    <Divider />\n                    <Statistic\n                      title=\"Idle\"\n                      value={9.3}\n                      precision={2}\n                      valueStyle={{ color: '#cf1322' }}\n                      prefix={<ArrowDownOutlined />}\n                      suffix=\"%\"\n                    />\n                </Card>\n            </Col>\n\n\n            <Col  className=\"gutter-row\" {...gridSpan} >\n              <Card hoverable className='gutter-box' bodyStyle={{paddingTop: '14px'}}>\n                <Statistic title=\"Total Article\" value={671135} />\n                <Divider />\n                <Statistic title=\"Total Users\" value={112893} style={{marginTop: '-4px'}}/>\n              </Card>\n            </Col>\n\n            <Col className=\"gutter-row\" {...gridSpan}>\n              <Card hoverable className='gutter-box' bodyStyle={{paddingTop: '45px'}}>\n                <h3>{this.state.time.format('dddd')}</h3>\n                <h2>{this.state.time.format('MMMM Do')}</h2>\n                <Typography>{this.state.time.format('h:mm:ss a')}</Typography>\n                {/* <Typography.Title level={3} style={{color: '#1a90ff'}}>{this.state.time.format('dddd, MMMM Do')}</Typography.Title>\n                <Typography.Title level={4}>{this.state.time.format('h:mm:ss a')}</Typography.Title> */}\n              </Card>\n            </Col>\n\n          </Row>\n        </Card>\n\n        <Card\n        title='User Activities'\n        bordered={false}\n        // bodyStyle={{paddingTop: '6px'}}\n        >\n          <Spin spinning={this.state.isLoading}>\n          {\n          this.state.hasError ? <Result icon={<FrownOutlined />} title={'Failed to retrive data'} />\n          : <div ref={this.VisitsChartRef} style={{height: '300px', flex: 'auto', width: '100%'}}></div>\n          }\n          </Spin>\n        </Card>\n\n      </>\n    )\n  }\n}\n"],"sourceRoot":""}